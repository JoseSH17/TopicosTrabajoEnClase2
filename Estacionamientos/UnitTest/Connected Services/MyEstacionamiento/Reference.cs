//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UnitTest.MyEstacionamiento {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MyEstacionamiento.IMyEstacionamiento")]
    public interface IMyEstacionamiento {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyEstacionamiento/ListarRegistrosPorRangoDeFechas", ReplyAction="http://tempuri.org/IMyEstacionamiento/ListarRegistrosPorRangoDeFechasResponse")]
        Estacionamientos.Model.Estacionamiento[] ListarRegistrosPorRangoDeFechas(System.DateTime PrimeraFecha, System.DateTime SegundaFecha);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyEstacionamiento/ListarRegistrosPorRangoDeFechas", ReplyAction="http://tempuri.org/IMyEstacionamiento/ListarRegistrosPorRangoDeFechasResponse")]
        System.Threading.Tasks.Task<Estacionamientos.Model.Estacionamiento[]> ListarRegistrosPorRangoDeFechasAsync(System.DateTime PrimeraFecha, System.DateTime SegundaFecha);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyEstacionamiento/ListarRegistrosPorProvincia", ReplyAction="http://tempuri.org/IMyEstacionamiento/ListarRegistrosPorProvinciaResponse")]
        Estacionamientos.Model.Estacionamiento[] ListarRegistrosPorProvincia(int IDProvincia);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyEstacionamiento/ListarRegistrosPorProvincia", ReplyAction="http://tempuri.org/IMyEstacionamiento/ListarRegistrosPorProvinciaResponse")]
        System.Threading.Tasks.Task<Estacionamientos.Model.Estacionamiento[]> ListarRegistrosPorProvinciaAsync(int IDProvincia);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyEstacionamiento/GetData", ReplyAction="http://tempuri.org/IMyEstacionamiento/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyEstacionamiento/GetData", ReplyAction="http://tempuri.org/IMyEstacionamiento/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyEstacionamiento/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IMyEstacionamiento/GetDataUsingDataContractResponse")]
        WCF.CompositeType GetDataUsingDataContract(WCF.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyEstacionamiento/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IMyEstacionamiento/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<WCF.CompositeType> GetDataUsingDataContractAsync(WCF.CompositeType composite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMyEstacionamientoChannel : UnitTest.MyEstacionamiento.IMyEstacionamiento, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MyEstacionamientoClient : System.ServiceModel.ClientBase<UnitTest.MyEstacionamiento.IMyEstacionamiento>, UnitTest.MyEstacionamiento.IMyEstacionamiento {
        
        public MyEstacionamientoClient() {
        }
        
        public MyEstacionamientoClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MyEstacionamientoClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyEstacionamientoClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyEstacionamientoClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Estacionamientos.Model.Estacionamiento[] ListarRegistrosPorRangoDeFechas(System.DateTime PrimeraFecha, System.DateTime SegundaFecha) {
            return base.Channel.ListarRegistrosPorRangoDeFechas(PrimeraFecha, SegundaFecha);
        }
        
        public System.Threading.Tasks.Task<Estacionamientos.Model.Estacionamiento[]> ListarRegistrosPorRangoDeFechasAsync(System.DateTime PrimeraFecha, System.DateTime SegundaFecha) {
            return base.Channel.ListarRegistrosPorRangoDeFechasAsync(PrimeraFecha, SegundaFecha);
        }
        
        public Estacionamientos.Model.Estacionamiento[] ListarRegistrosPorProvincia(int IDProvincia) {
            return base.Channel.ListarRegistrosPorProvincia(IDProvincia);
        }
        
        public System.Threading.Tasks.Task<Estacionamientos.Model.Estacionamiento[]> ListarRegistrosPorProvinciaAsync(int IDProvincia) {
            return base.Channel.ListarRegistrosPorProvinciaAsync(IDProvincia);
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public WCF.CompositeType GetDataUsingDataContract(WCF.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<WCF.CompositeType> GetDataUsingDataContractAsync(WCF.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
    }
}
